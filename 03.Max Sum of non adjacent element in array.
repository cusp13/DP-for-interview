Given an array Arr of size N containing positive integers.
Find the maximum sum of a subsequence such that no two numbers in the sequence should be adjacent in the array.

Example 1:

Input:
N = 6
Arr[] = {5, 5, 10, 100, 10, 5}
Output: 110
Explanation: If you take indices 0, 3
and 5, then Arr[0]+Arr[3]+Arr[5] =
5+100+5 = 110.

approach: As we need to find the sum of subsequences, one approach that comes to our mind is to generate all subsequences and pick the one with the maximum sum. 

To generate all the subsequences, we can use the pick/non-pick technique. This technique can be briefly explained as follows:

At every index of the array, we have two options.
First, to pick the array element at that index and consider it in our subsequence.
Second, to leave the array element at that index and not to consider it in our subsequence.
A more detailed explanation of this technique is taught in Recursion on subsequences. Readers are highly advised to watch that video.

First, we will try to form the recursive solution to the problem with the pick/non-pick technique. There is one more catch,
the problem wants us to have only non-adjacent elements of the array in the subsequence, therefore we need to address that too.

code:-
int func(int n,vector<int>&dp,vector<int>&arr){
	    if(n==0){
	        return arr[0];
	    }
	    if(n<0){
	        return 0;
	    }
	    if(dp[n]!=-1){
	        return dp[n];
	    }
	    int pick=0;
	    int notpick = func(n-1,dp,arr);
	    if(n>0){
	        pick = arr[n] + func(n-2,dp,arr);
	    }
	    return dp[n]=max(pick,notpick);
	}
	int findMaxSum(int *arr, int n) {
	    vector<int>v;
	    for(int i=0;i<n;i++){
	        v.push_back(arr[i]);
	    }
	    vector<int>dp(n+1,-1);
	    return func(n-1,dp,v);
	}
