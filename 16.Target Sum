You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

//Code;-
int f(vector<int>&nums,int target,int ind,vector<vector<int>>&dp){
    if(ind==0){
        if(target==0 && nums[0]==0){
            return 2;
        }
        else if(nums[0]==target || target==0){
            return 1;
        }
        else{
            return 0;
        }
    }
    if(dp[ind][target]!=-1){
        return dp[ind][target];
    }
    int notake=f(nums,target,ind-1,dp);
    int take=0;
    if(target-nums[ind]>=0){
        take = f(nums,target-nums[ind],ind-1,dp);
    }
    return dp[ind][target]=take+notake;
}
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = accumulate(nums.begin(),nums.end(),0);
        int n=nums.size();
        if((sum-target)%2==1){
            return 0;
        }
        if(sum<abs(target)){
           return 0;
        }
        int tar = (sum-target)/2;
        vector<vector<int>>dp(n+1,vector<int>(tar+1,-1));
        return f(nums,tar,n-1,dp);
    }
};
