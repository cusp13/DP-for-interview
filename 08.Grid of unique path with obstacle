You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

Approach: same as unique path one difference is when onbstacle arises return 0 means no path exist through tha way.

//Code:-
int f(int n,int m,vector<vector<int>>&grid){
    if(n==0 && m==0){
        return 1;
    }
    if(n<0 || m<0 || grid[n][m]==1){
        return 0;
    }
    if(dp[n][m]!=-1){
        return dp[n][m];
    }
    int left = f(n,m-1,grid);
    int right = f(n-1,m,grid);

    return dp[n][m] = left+right;
}
    int uniquePathsWithObstacles(vector<vector<int>>&grid) {
        int n=grid.size();
        int m=grid[0].size();
        // memset(dp,-1,sizeof(dp));
        if(grid[0][0]==1){
            return 0;
        }
        // return f(n-1,m-1,grid);
         dp[0][0]=0;
         for(int i=0;i<n;i++){
             for(int j=0;j<m;j++){
                 if(i==0 && j==0){
                     dp[i][j]=1;
                 }
                else if(grid[i][j]==1){
                    dp[i][j]=0;
                }
                else{
                     int up=0,left=0;
                    if(i>0) up = dp[i-1][j];
                    if(j>0) left = dp[i][j-1];
                    dp[i][j]=left+up;
                }
             }
         }
         return dp[n-1][m-1];



 
